name: tree-sitter-jinja2

on: [pull_request]

jobs:

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-10.15, windows-2019]
        python-version: [3.8]
    steps:
      - uses: actions/checkout@v2
      - name: Setup npm
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: make install LOG=true
      - name: Build tree-sitter
        run: make build LOG=true
      - name: Test tree-sitter
        run: make test LOG=true

  build-manylinux:
    needs: [test]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        python-version: [3.8]
    steps:
      - uses: actions/checkout@v2
      - name: Prepare to build bindings
        run: make prebindings LOG=true
      - name: Build manylinux Python wheels
        uses: RalfG/python-wheels-manylinux-build@v0.3.4-manylinux2010_x86_64
        with:
          python-versions: 'cp36-cp36m cp37-cp37m'
          build-requirements: 'cython numpy'
          package-path: 'bindings/python3/'
      - name: Cache wheel for distribution
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-${{ matrix.python-version }}
          path: bindings/python3/dist/*-manylinux*.whl
          retention-days: 5

  build-mac-windows:
    needs: [test]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-10.15, windows-2019]
        python-version: [3.8]
    steps:
      - uses: actions/checkout@v2
      - name: Build bindings
        run: make bindings LOG=true
      - name: Cache wheel for distribution
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-${{ matrix.python-version }}
          path: bindings/python3/dist/*.whl
          retention-days: 5

  publish:
    needs: [build-manylinux, build-mac-windows]
    runs-on: ubuntu-20.04
    steps:
      - name: Fetch wheels from cache
        uses: actions/download-artifact@v2
      - name: Gather wheels
        run: |
          mkdir dist/
          find . -type f -name '*.whl' -exec mv -i '{}' ./dist/ ';'
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - run: pip install wheel twine
      - name: Publish distribution ðŸ“¦ to Test PyPI
        env:
          TWINE_USERNAME: ${{ secrets.TEST_PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_PASSWORD }}
        run: twine check dist/* && twine upload --repository-url https://test.pypi.org/legacy/ --non-interactive dist/* --verbose

